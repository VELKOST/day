import telebot
from telebot import types
import sqlite3
import random
import os
from dotenv import load_dotenv
from types import SimpleNamespace
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = telebot.TeleBot(API_TOKEN)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('phrases.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS phrases (
    id INTEGER PRIMARY KEY,
    text TEXT,
    approved INTEGER DEFAULT 1
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS suggestions (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    text TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS subscribers (
    user_id INTEGER PRIMARY KEY
)
''')
conn.commit()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìù –ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞")
    return markup


# --- /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É –¥–Ω—è.",
        reply_markup=main_keyboard()
    )


# --- –ö–Ω–æ–ø–∫–∞ "üìù –ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞"
@bot.message_handler(func=lambda message: message.text == "üìù –ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞")
def handle_new_phrase_button(message):
    send_phrase(SimpleNamespace(message=message))


# --- –§—Ä–∞–∑–∞
def send_phrase(target):
    cursor.execute("SELECT text FROM phrases WHERE approved = 1")
    results = cursor.fetchall()
    if results:
        phrase = random.choice(results)[0]
        bot.send_message(target.message.chat.id, f"‚ú® –§—Ä–∞–∑–∞ –¥–Ω—è:\n\n{phrase}", reply_markup=main_keyboard())
    else:
        bot.send_message(target.message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ üòî", reply_markup=main_keyboard())


@bot.message_handler(commands=['newphrase'])
def cmd_newphrase(message):
    send_phrase(SimpleNamespace(message=message))


# --- –ü–æ–¥–ø–∏—Å–∫–∞
@bot.message_handler(commands=['subscribe'])
def subscribe(message):
    cursor.execute("INSERT OR IGNORE INTO subscribers (user_id) VALUES (?)", (message.chat.id,))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é!")


@bot.message_handler(commands=['unsubscribe'])
def unsubscribe(message):
    cursor.execute("DELETE FROM subscribers WHERE user_id = ?", (message.chat.id,))
    conn.commit()
    bot.send_message(message.chat.id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ñ—Ä–∞–∑.")


# --- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
def send_daily_phrases():
    cursor.execute("SELECT text FROM phrases WHERE approved = 1")
    phrases = cursor.fetchall()
    if not phrases:
        return
    phrase = random.choice(phrases)[0]

    cursor.execute("SELECT user_id FROM subscribers")
    users = cursor.fetchall()

    for (user_id,) in users:
        try:
            bot.send_message(user_id, f"üåû –§—Ä–∞–∑–∞ –¥–Ω—è:\n\n{phrase}", reply_markup=main_keyboard())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")


scheduler = BackgroundScheduler()
scheduler.add_job(send_daily_phrases, 'cron', hour=12, minute=0)
scheduler.start()


# --- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã
@bot.message_handler(commands=['suggest'])
def suggest_phrase(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ—Ä–∞–∑—É –¥–Ω—è:")
    bot.register_next_step_handler(msg, save_suggestion)


def save_suggestion(message):
    cursor.execute("INSERT INTO suggestions (user_id, text) VALUES (?, ?)", (message.from_user.id, message.text))
    conn.commit()
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –§—Ä–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")


# --- –ú–æ–¥–µ—Ä–∞—Ü–∏—è
@bot.message_handler(commands=['moderate'])
def moderate(message):
    if message.from_user.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    cursor.execute("SELECT id, text FROM suggestions")
    suggestions = cursor.fetchall()
    if not suggestions:
        return bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑.")

    for sid, text in suggestions:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{sid}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{sid}")
        )
        bot.send_message(message.chat.id, f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n{text}", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_") or call.data.startswith("reject_"))
def handle_moderation(call):
    if call.from_user.id != ADMIN_ID:
        return bot.answer_callback_query(call.id, "–ù–µ –¥–ª—è —Ç–µ–±—è üòé")

    action, sid = call.data.split("_")
    sid = int(sid)

    cursor.execute("SELECT text FROM suggestions WHERE id = ?", (sid,))
    result = cursor.fetchone()
    if not result:
        return bot.edit_message_text("–§—Ä–∞–∑–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", call.message.chat.id, call.message.message_id)

    text = result[0]

    if action == "approve":
        cursor.execute("INSERT INTO phrases (text, approved) VALUES (?, 1)", (text,))
        conn.commit()
        bot.edit_message_text(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ:\n{text}", call.message.chat.id, call.message.message_id)
    else:
        bot.edit_message_text(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ:\n{text}", call.message.chat.id, call.message.message_id)

    cursor.execute("DELETE FROM suggestions WHERE id = ?", (sid,))
    conn.commit()


# --- –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑
@bot.message_handler(commands=['bulkadd'])
def bulk_add(message):
    if message.from_user.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):")
    bot.register_next_step_handler(msg, save_bulk)


def save_bulk(message):
    phrases = message.text.strip().split("\n")
    count = 0
    for phrase in phrases:
        clean = phrase.strip()
        if clean:
            cursor.execute("INSERT INTO phrases (text, approved) VALUES (?, 1)", (clean,))
            count += 1
    conn.commit()
    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Ñ—Ä–∞–∑.")


# --- –ó–∞–ø—É—Å–∫
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
